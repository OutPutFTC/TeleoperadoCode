package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp(name="Teleoperado")
public class Teleoperado extends LinearOpMode {

    public void runOpMode() throws InterruptedException {
        // Declarar os motores e suas identificações
        DcMotor motor1 = hardwareMap.dcMotor.get("motor1");
        DcMotor motor2 = hardwareMap.dcMotor.get("motor2");
        DcMotor motor3 = hardwareMap.dcMotor.get("motor3");
        DcMotor motor4 = hardwareMap.dcMotor.get("motor4");
        //Servo servoEsticante = hardwareMap.servo.get("motorEsticante");
        //DcMotor motorArtic = hardwareMap.dcMotor.get("motorArtic");
        //DcMotor motorColetor = hardwareMap.dcMotor.get("motorColector");
        
        //DcMotor motorPato = hardwareMap.dcMotor.get("motorDuck");
        
        //Servo servo1 = hardwareMap.servo.get("servo1");

        // Reverse the right side motors
        // Reverse left motors if you are using NeveRests
        motor3.setDirection(DcMotor.Direction.REVERSE);
        //motor1.setDirection(DcMotor.Direction.REVERSE);
        motor2.setDirection(DcMotor.Direction.REVERSE);
        //motor4.setDirection(DcMotor.Direction.REVERSE);
        
        //motorHex.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //((DcMotorEx) motorHex).setVelocity(1.0);
      
        waitForStart();

        if (isStopRequested()) return;

        while (opModeIsActive()) {
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rx = gamepad1.right_stick_x;
            
            double denominador = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominador;
            double backLeftPower = (y - x + rx) / denominador;
            double frontRightPower = (y - x - rx) / denominador;
            double backRightPower = (y + x - rx) / denominador;

            motor1.setPower(frontLeftPower);
            motor2.setPower(frontRightPower);
            motor3.setPower(backLeftPower);
            motor4.setPower(backRightPower);
            
            //motorPato.setPower(gamepad2.right_stick_y);
            
            // motorArtic.setPower(gamepad2.left_stick_y);
            // if(gamepad2.left_trigger > 0){
            //     motorColetor.setPower(gamepad2.left_trigger);    
            //     }else if(gamepad2.right_trigger > 0){
            //     motorColetor.setPower(-gamepad2.right_trigger);
            //     }else if (gamepad2.left_trigger == 0 && gamepad2.right_trigger == 0){
            //     motorColetor.setPower(0);
            //     }
            
            
            
            //telemetry.addData("motorMovimentoBraco", motorArtic.getCurrentPosition());
            telemetry.addData("y", "%.2f", gamepad2.left_stick_y);
            telemetry.update();
            
            /*
            if(gamepad2.a){
            servo1.setPosition(1);
            }else{
            servo1.setPosition(0);
            }
            */
            /*
            if(gamepad1.a){
                servoEsticante.setPosition(1);
            }else{
                servoEsticante.setPosition(0);
            }
            */
            /*
            if(gamepad1.b){
                motorHex.setTargetPosition(3 * 252);
                motorHex.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            }
            */
            /*
            frontLeftPower
            backLeftPower
            frontRightPower
            backRightPower

            frontLeftPower
            backLeftPower
            frontRightPower
            backRightPower
            */

        }
    }
    public void motorHexConfig(DcMotor motorArtic){
        motorArtic.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        ((DcMotorEx) motorArtic).setVelocity(1000);
        motorArtic.setTargetPosition(1650);
        motorArtic.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
}
    
